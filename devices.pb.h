// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devices.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devices_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devices_2eproto;
namespace Devices {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceList;
struct DeviceListDefaultTypeInternal;
extern DeviceListDefaultTypeInternal _DeviceList_default_instance_;
class IfDo;
struct IfDoDefaultTypeInternal;
extern IfDoDefaultTypeInternal _IfDo_default_instance_;
}  // namespace Devices
PROTOBUF_NAMESPACE_OPEN
template<> ::Devices::Device* Arena::CreateMaybeMessage<::Devices::Device>(Arena*);
template<> ::Devices::DeviceList* Arena::CreateMaybeMessage<::Devices::DeviceList>(Arena*);
template<> ::Devices::IfDo* Arena::CreateMaybeMessage<::Devices::IfDo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Devices {

// ===================================================================

class IfDo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Devices.IfDo) */ {
 public:
  inline IfDo() : IfDo(nullptr) {}
  ~IfDo() override;
  explicit PROTOBUF_CONSTEXPR IfDo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IfDo(const IfDo& from);
  IfDo(IfDo&& from) noexcept
    : IfDo() {
    *this = ::std::move(from);
  }

  inline IfDo& operator=(const IfDo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IfDo& operator=(IfDo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IfDo& default_instance() {
    return *internal_default_instance();
  }
  static inline const IfDo* internal_default_instance() {
    return reinterpret_cast<const IfDo*>(
               &_IfDo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IfDo& a, IfDo& b) {
    a.Swap(&b);
  }
  inline void Swap(IfDo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IfDo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IfDo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IfDo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IfDo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IfDo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IfDo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Devices.IfDo";
  }
  protected:
  explicit IfDo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfFieldNumber = 1,
    kDoFieldNumber = 2,
  };
  // optional string if = 1;
  bool has_if_() const;
  private:
  bool _internal_has_if_() const;
  public:
  void clear_if_();
  const std::string& if_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_if_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_if_();
  PROTOBUF_NODISCARD std::string* release_if_();
  void set_allocated_if_(std::string* if_);
  private:
  const std::string& _internal_if_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_if_(const std::string& value);
  std::string* _internal_mutable_if_();
  public:

  // optional string do = 2;
  bool has_do_() const;
  private:
  bool _internal_has_do_() const;
  public:
  void clear_do_();
  const std::string& do_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_do_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_do_();
  PROTOBUF_NODISCARD std::string* release_do_();
  void set_allocated_do_(std::string* do_);
  private:
  const std::string& _internal_do_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_do_(const std::string& value);
  std::string* _internal_mutable_do_();
  public:

  // @@protoc_insertion_point(class_scope:Devices.IfDo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr do__;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Devices.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit PROTOBUF_CONSTEXPR Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Devices.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnEqualFieldNumber = 8,
    kOnGreaterFieldNumber = 9,
    kOnLesserFieldNumber = 10,
    kDeviceNameFieldNumber = 1,
    kDeviceCategoryFieldNumber = 2,
    kDeviceTypeFieldNumber = 3,
    kDeviceStateFieldNumber = 4,
    kDeviceConnectionStateFieldNumber = 5,
    kDeviceBatteryFieldNumber = 6,
    kDeviceValueFieldNumber = 7,
  };
  // repeated .Devices.IfDo onEqual = 8;
  int onequal_size() const;
  private:
  int _internal_onequal_size() const;
  public:
  void clear_onequal();
  ::Devices::IfDo* mutable_onequal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >*
      mutable_onequal();
  private:
  const ::Devices::IfDo& _internal_onequal(int index) const;
  ::Devices::IfDo* _internal_add_onequal();
  public:
  const ::Devices::IfDo& onequal(int index) const;
  ::Devices::IfDo* add_onequal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >&
      onequal() const;

  // repeated .Devices.IfDo onGreater = 9;
  int ongreater_size() const;
  private:
  int _internal_ongreater_size() const;
  public:
  void clear_ongreater();
  ::Devices::IfDo* mutable_ongreater(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >*
      mutable_ongreater();
  private:
  const ::Devices::IfDo& _internal_ongreater(int index) const;
  ::Devices::IfDo* _internal_add_ongreater();
  public:
  const ::Devices::IfDo& ongreater(int index) const;
  ::Devices::IfDo* add_ongreater();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >&
      ongreater() const;

  // repeated .Devices.IfDo onLesser = 10;
  int onlesser_size() const;
  private:
  int _internal_onlesser_size() const;
  public:
  void clear_onlesser();
  ::Devices::IfDo* mutable_onlesser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >*
      mutable_onlesser();
  private:
  const ::Devices::IfDo& _internal_onlesser(int index) const;
  ::Devices::IfDo* _internal_add_onlesser();
  public:
  const ::Devices::IfDo& onlesser(int index) const;
  ::Devices::IfDo* add_onlesser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >&
      onlesser() const;

  // optional string deviceName = 1;
  bool has_devicename() const;
  private:
  bool _internal_has_devicename() const;
  public:
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // optional string deviceCategory = 2;
  bool has_devicecategory() const;
  private:
  bool _internal_has_devicecategory() const;
  public:
  void clear_devicecategory();
  const std::string& devicecategory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicecategory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicecategory();
  PROTOBUF_NODISCARD std::string* release_devicecategory();
  void set_allocated_devicecategory(std::string* devicecategory);
  private:
  const std::string& _internal_devicecategory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicecategory(const std::string& value);
  std::string* _internal_mutable_devicecategory();
  public:

  // optional int32 deviceType = 3;
  bool has_devicetype() const;
  private:
  bool _internal_has_devicetype() const;
  public:
  void clear_devicetype();
  int32_t devicetype() const;
  void set_devicetype(int32_t value);
  private:
  int32_t _internal_devicetype() const;
  void _internal_set_devicetype(int32_t value);
  public:

  // optional int32 deviceState = 4;
  bool has_devicestate() const;
  private:
  bool _internal_has_devicestate() const;
  public:
  void clear_devicestate();
  int32_t devicestate() const;
  void set_devicestate(int32_t value);
  private:
  int32_t _internal_devicestate() const;
  void _internal_set_devicestate(int32_t value);
  public:

  // optional int32 deviceConnectionState = 5;
  bool has_deviceconnectionstate() const;
  private:
  bool _internal_has_deviceconnectionstate() const;
  public:
  void clear_deviceconnectionstate();
  int32_t deviceconnectionstate() const;
  void set_deviceconnectionstate(int32_t value);
  private:
  int32_t _internal_deviceconnectionstate() const;
  void _internal_set_deviceconnectionstate(int32_t value);
  public:

  // optional int32 deviceBattery = 6;
  bool has_devicebattery() const;
  private:
  bool _internal_has_devicebattery() const;
  public:
  void clear_devicebattery();
  int32_t devicebattery() const;
  void set_devicebattery(int32_t value);
  private:
  int32_t _internal_devicebattery() const;
  void _internal_set_devicebattery(int32_t value);
  public:

  // optional float deviceValue = 7;
  bool has_devicevalue() const;
  private:
  bool _internal_has_devicevalue() const;
  public:
  void clear_devicevalue();
  float devicevalue() const;
  void set_devicevalue(float value);
  private:
  float _internal_devicevalue() const;
  void _internal_set_devicevalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:Devices.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo > onequal_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo > ongreater_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo > onlesser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicecategory_;
  int32_t devicetype_;
  int32_t devicestate_;
  int32_t deviceconnectionstate_;
  int32_t devicebattery_;
  float devicevalue_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class DeviceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Devices.DeviceList) */ {
 public:
  inline DeviceList() : DeviceList(nullptr) {}
  ~DeviceList() override;
  explicit PROTOBUF_CONSTEXPR DeviceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceList(const DeviceList& from);
  DeviceList(DeviceList&& from) noexcept
    : DeviceList() {
    *this = ::std::move(from);
  }

  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceList& operator=(DeviceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceList* internal_default_instance() {
    return reinterpret_cast<const DeviceList*>(
               &_DeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceList& a, DeviceList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Devices.DeviceList";
  }
  protected:
  explicit DeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceVectorFieldNumber = 1,
  };
  // repeated .Devices.Device deviceVector = 1;
  int devicevector_size() const;
  private:
  int _internal_devicevector_size() const;
  public:
  void clear_devicevector();
  ::Devices::Device* mutable_devicevector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::Device >*
      mutable_devicevector();
  private:
  const ::Devices::Device& _internal_devicevector(int index) const;
  ::Devices::Device* _internal_add_devicevector();
  public:
  const ::Devices::Device& devicevector(int index) const;
  ::Devices::Device* add_devicevector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::Device >&
      devicevector() const;

  // @@protoc_insertion_point(class_scope:Devices.DeviceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::Device > devicevector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IfDo

// optional string if = 1;
inline bool IfDo::_internal_has_if_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IfDo::has_if_() const {
  return _internal_has_if_();
}
inline void IfDo::clear_if_() {
  if__.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IfDo::if_() const {
  // @@protoc_insertion_point(field_get:Devices.IfDo.if)
  return _internal_if_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IfDo::set_if_(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 if__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Devices.IfDo.if)
}
inline std::string* IfDo::mutable_if_() {
  std::string* _s = _internal_mutable_if_();
  // @@protoc_insertion_point(field_mutable:Devices.IfDo.if)
  return _s;
}
inline const std::string& IfDo::_internal_if_() const {
  return if__.Get();
}
inline void IfDo::_internal_set_if_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  if__.Set(value, GetArenaForAllocation());
}
inline std::string* IfDo::_internal_mutable_if_() {
  _has_bits_[0] |= 0x00000001u;
  return if__.Mutable(GetArenaForAllocation());
}
inline std::string* IfDo::release_if_() {
  // @@protoc_insertion_point(field_release:Devices.IfDo.if)
  if (!_internal_has_if_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = if__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (if__.IsDefault()) {
    if__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IfDo::set_allocated_if_(std::string* if_) {
  if (if_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  if__.SetAllocated(if_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (if__.IsDefault()) {
    if__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Devices.IfDo.if)
}

// optional string do = 2;
inline bool IfDo::_internal_has_do_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IfDo::has_do_() const {
  return _internal_has_do_();
}
inline void IfDo::clear_do_() {
  do__.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IfDo::do_() const {
  // @@protoc_insertion_point(field_get:Devices.IfDo.do)
  return _internal_do_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IfDo::set_do_(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 do__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Devices.IfDo.do)
}
inline std::string* IfDo::mutable_do_() {
  std::string* _s = _internal_mutable_do_();
  // @@protoc_insertion_point(field_mutable:Devices.IfDo.do)
  return _s;
}
inline const std::string& IfDo::_internal_do_() const {
  return do__.Get();
}
inline void IfDo::_internal_set_do_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  do__.Set(value, GetArenaForAllocation());
}
inline std::string* IfDo::_internal_mutable_do_() {
  _has_bits_[0] |= 0x00000002u;
  return do__.Mutable(GetArenaForAllocation());
}
inline std::string* IfDo::release_do_() {
  // @@protoc_insertion_point(field_release:Devices.IfDo.do)
  if (!_internal_has_do_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = do__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (do__.IsDefault()) {
    do__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IfDo::set_allocated_do_(std::string* do_) {
  if (do_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  do__.SetAllocated(do_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (do__.IsDefault()) {
    do__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Devices.IfDo.do)
}

// -------------------------------------------------------------------

// Device

// optional string deviceName = 1;
inline bool Device::_internal_has_devicename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Device::has_devicename() const {
  return _internal_has_devicename();
}
inline void Device::clear_devicename() {
  devicename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Device::devicename() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_devicename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 devicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Devices.Device.deviceName)
}
inline std::string* Device::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:Devices.Device.deviceName)
  return _s;
}
inline const std::string& Device::_internal_devicename() const {
  return devicename_.Get();
}
inline void Device::_internal_set_devicename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_devicename() {
  _has_bits_[0] |= 0x00000001u;
  return devicename_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_devicename() {
  // @@protoc_insertion_point(field_release:Devices.Device.deviceName)
  if (!_internal_has_devicename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = devicename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicename_.IsDefault()) {
    devicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Device::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  devicename_.SetAllocated(devicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicename_.IsDefault()) {
    devicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Devices.Device.deviceName)
}

// optional string deviceCategory = 2;
inline bool Device::_internal_has_devicecategory() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Device::has_devicecategory() const {
  return _internal_has_devicecategory();
}
inline void Device::clear_devicecategory() {
  devicecategory_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Device::devicecategory() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceCategory)
  return _internal_devicecategory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_devicecategory(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 devicecategory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Devices.Device.deviceCategory)
}
inline std::string* Device::mutable_devicecategory() {
  std::string* _s = _internal_mutable_devicecategory();
  // @@protoc_insertion_point(field_mutable:Devices.Device.deviceCategory)
  return _s;
}
inline const std::string& Device::_internal_devicecategory() const {
  return devicecategory_.Get();
}
inline void Device::_internal_set_devicecategory(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  devicecategory_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_devicecategory() {
  _has_bits_[0] |= 0x00000002u;
  return devicecategory_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_devicecategory() {
  // @@protoc_insertion_point(field_release:Devices.Device.deviceCategory)
  if (!_internal_has_devicecategory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = devicecategory_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicecategory_.IsDefault()) {
    devicecategory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Device::set_allocated_devicecategory(std::string* devicecategory) {
  if (devicecategory != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  devicecategory_.SetAllocated(devicecategory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devicecategory_.IsDefault()) {
    devicecategory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Devices.Device.deviceCategory)
}

// optional int32 deviceType = 3;
inline bool Device::_internal_has_devicetype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Device::has_devicetype() const {
  return _internal_has_devicetype();
}
inline void Device::clear_devicetype() {
  devicetype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Device::_internal_devicetype() const {
  return devicetype_;
}
inline int32_t Device::devicetype() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceType)
  return _internal_devicetype();
}
inline void Device::_internal_set_devicetype(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  devicetype_ = value;
}
inline void Device::set_devicetype(int32_t value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:Devices.Device.deviceType)
}

// optional int32 deviceState = 4;
inline bool Device::_internal_has_devicestate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Device::has_devicestate() const {
  return _internal_has_devicestate();
}
inline void Device::clear_devicestate() {
  devicestate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Device::_internal_devicestate() const {
  return devicestate_;
}
inline int32_t Device::devicestate() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceState)
  return _internal_devicestate();
}
inline void Device::_internal_set_devicestate(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  devicestate_ = value;
}
inline void Device::set_devicestate(int32_t value) {
  _internal_set_devicestate(value);
  // @@protoc_insertion_point(field_set:Devices.Device.deviceState)
}

// optional int32 deviceConnectionState = 5;
inline bool Device::_internal_has_deviceconnectionstate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Device::has_deviceconnectionstate() const {
  return _internal_has_deviceconnectionstate();
}
inline void Device::clear_deviceconnectionstate() {
  deviceconnectionstate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t Device::_internal_deviceconnectionstate() const {
  return deviceconnectionstate_;
}
inline int32_t Device::deviceconnectionstate() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceConnectionState)
  return _internal_deviceconnectionstate();
}
inline void Device::_internal_set_deviceconnectionstate(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  deviceconnectionstate_ = value;
}
inline void Device::set_deviceconnectionstate(int32_t value) {
  _internal_set_deviceconnectionstate(value);
  // @@protoc_insertion_point(field_set:Devices.Device.deviceConnectionState)
}

// optional int32 deviceBattery = 6;
inline bool Device::_internal_has_devicebattery() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Device::has_devicebattery() const {
  return _internal_has_devicebattery();
}
inline void Device::clear_devicebattery() {
  devicebattery_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t Device::_internal_devicebattery() const {
  return devicebattery_;
}
inline int32_t Device::devicebattery() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceBattery)
  return _internal_devicebattery();
}
inline void Device::_internal_set_devicebattery(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  devicebattery_ = value;
}
inline void Device::set_devicebattery(int32_t value) {
  _internal_set_devicebattery(value);
  // @@protoc_insertion_point(field_set:Devices.Device.deviceBattery)
}

// optional float deviceValue = 7;
inline bool Device::_internal_has_devicevalue() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Device::has_devicevalue() const {
  return _internal_has_devicevalue();
}
inline void Device::clear_devicevalue() {
  devicevalue_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Device::_internal_devicevalue() const {
  return devicevalue_;
}
inline float Device::devicevalue() const {
  // @@protoc_insertion_point(field_get:Devices.Device.deviceValue)
  return _internal_devicevalue();
}
inline void Device::_internal_set_devicevalue(float value) {
  _has_bits_[0] |= 0x00000040u;
  devicevalue_ = value;
}
inline void Device::set_devicevalue(float value) {
  _internal_set_devicevalue(value);
  // @@protoc_insertion_point(field_set:Devices.Device.deviceValue)
}

// repeated .Devices.IfDo onEqual = 8;
inline int Device::_internal_onequal_size() const {
  return onequal_.size();
}
inline int Device::onequal_size() const {
  return _internal_onequal_size();
}
inline void Device::clear_onequal() {
  onequal_.Clear();
}
inline ::Devices::IfDo* Device::mutable_onequal(int index) {
  // @@protoc_insertion_point(field_mutable:Devices.Device.onEqual)
  return onequal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >*
Device::mutable_onequal() {
  // @@protoc_insertion_point(field_mutable_list:Devices.Device.onEqual)
  return &onequal_;
}
inline const ::Devices::IfDo& Device::_internal_onequal(int index) const {
  return onequal_.Get(index);
}
inline const ::Devices::IfDo& Device::onequal(int index) const {
  // @@protoc_insertion_point(field_get:Devices.Device.onEqual)
  return _internal_onequal(index);
}
inline ::Devices::IfDo* Device::_internal_add_onequal() {
  return onequal_.Add();
}
inline ::Devices::IfDo* Device::add_onequal() {
  ::Devices::IfDo* _add = _internal_add_onequal();
  // @@protoc_insertion_point(field_add:Devices.Device.onEqual)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >&
Device::onequal() const {
  // @@protoc_insertion_point(field_list:Devices.Device.onEqual)
  return onequal_;
}

// repeated .Devices.IfDo onGreater = 9;
inline int Device::_internal_ongreater_size() const {
  return ongreater_.size();
}
inline int Device::ongreater_size() const {
  return _internal_ongreater_size();
}
inline void Device::clear_ongreater() {
  ongreater_.Clear();
}
inline ::Devices::IfDo* Device::mutable_ongreater(int index) {
  // @@protoc_insertion_point(field_mutable:Devices.Device.onGreater)
  return ongreater_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >*
Device::mutable_ongreater() {
  // @@protoc_insertion_point(field_mutable_list:Devices.Device.onGreater)
  return &ongreater_;
}
inline const ::Devices::IfDo& Device::_internal_ongreater(int index) const {
  return ongreater_.Get(index);
}
inline const ::Devices::IfDo& Device::ongreater(int index) const {
  // @@protoc_insertion_point(field_get:Devices.Device.onGreater)
  return _internal_ongreater(index);
}
inline ::Devices::IfDo* Device::_internal_add_ongreater() {
  return ongreater_.Add();
}
inline ::Devices::IfDo* Device::add_ongreater() {
  ::Devices::IfDo* _add = _internal_add_ongreater();
  // @@protoc_insertion_point(field_add:Devices.Device.onGreater)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >&
Device::ongreater() const {
  // @@protoc_insertion_point(field_list:Devices.Device.onGreater)
  return ongreater_;
}

// repeated .Devices.IfDo onLesser = 10;
inline int Device::_internal_onlesser_size() const {
  return onlesser_.size();
}
inline int Device::onlesser_size() const {
  return _internal_onlesser_size();
}
inline void Device::clear_onlesser() {
  onlesser_.Clear();
}
inline ::Devices::IfDo* Device::mutable_onlesser(int index) {
  // @@protoc_insertion_point(field_mutable:Devices.Device.onLesser)
  return onlesser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >*
Device::mutable_onlesser() {
  // @@protoc_insertion_point(field_mutable_list:Devices.Device.onLesser)
  return &onlesser_;
}
inline const ::Devices::IfDo& Device::_internal_onlesser(int index) const {
  return onlesser_.Get(index);
}
inline const ::Devices::IfDo& Device::onlesser(int index) const {
  // @@protoc_insertion_point(field_get:Devices.Device.onLesser)
  return _internal_onlesser(index);
}
inline ::Devices::IfDo* Device::_internal_add_onlesser() {
  return onlesser_.Add();
}
inline ::Devices::IfDo* Device::add_onlesser() {
  ::Devices::IfDo* _add = _internal_add_onlesser();
  // @@protoc_insertion_point(field_add:Devices.Device.onLesser)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::IfDo >&
Device::onlesser() const {
  // @@protoc_insertion_point(field_list:Devices.Device.onLesser)
  return onlesser_;
}

// -------------------------------------------------------------------

// DeviceList

// repeated .Devices.Device deviceVector = 1;
inline int DeviceList::_internal_devicevector_size() const {
  return devicevector_.size();
}
inline int DeviceList::devicevector_size() const {
  return _internal_devicevector_size();
}
inline void DeviceList::clear_devicevector() {
  devicevector_.Clear();
}
inline ::Devices::Device* DeviceList::mutable_devicevector(int index) {
  // @@protoc_insertion_point(field_mutable:Devices.DeviceList.deviceVector)
  return devicevector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::Device >*
DeviceList::mutable_devicevector() {
  // @@protoc_insertion_point(field_mutable_list:Devices.DeviceList.deviceVector)
  return &devicevector_;
}
inline const ::Devices::Device& DeviceList::_internal_devicevector(int index) const {
  return devicevector_.Get(index);
}
inline const ::Devices::Device& DeviceList::devicevector(int index) const {
  // @@protoc_insertion_point(field_get:Devices.DeviceList.deviceVector)
  return _internal_devicevector(index);
}
inline ::Devices::Device* DeviceList::_internal_add_devicevector() {
  return devicevector_.Add();
}
inline ::Devices::Device* DeviceList::add_devicevector() {
  ::Devices::Device* _add = _internal_add_devicevector();
  // @@protoc_insertion_point(field_add:Devices.DeviceList.deviceVector)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Devices::Device >&
DeviceList::devicevector() const {
  // @@protoc_insertion_point(field_list:Devices.DeviceList.deviceVector)
  return devicevector_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Devices

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devices_2eproto
