// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devices.proto

#include "devices.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Devices {
PROTOBUF_CONSTEXPR IfDo::IfDo(
    ::_pbi::ConstantInitialized)
  : if__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , do__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct IfDoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IfDoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IfDoDefaultTypeInternal() {}
  union {
    IfDo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IfDoDefaultTypeInternal _IfDo_default_instance_;
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized)
  : onequal_()
  , ongreater_()
  , onlesser_()
  , devicename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , devicecategory_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , devicetype_(0)
  , devicestate_(0)
  , deviceconnectionstate_(0)
  , devicebattery_(0)
  , devicevalue_(0){}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
PROTOBUF_CONSTEXPR DeviceList::DeviceList(
    ::_pbi::ConstantInitialized)
  : devicevector_(){}
struct DeviceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceListDefaultTypeInternal() {}
  union {
    DeviceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceListDefaultTypeInternal _DeviceList_default_instance_;
}  // namespace Devices
static ::_pb::Metadata file_level_metadata_devices_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_devices_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_devices_2eproto = nullptr;

const uint32_t TableStruct_devices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Devices::IfDo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Devices::IfDo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Devices::IfDo, if__),
  PROTOBUF_FIELD_OFFSET(::Devices::IfDo, do__),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Devices::Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Devices::Device, devicename_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, devicecategory_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, devicetype_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, devicestate_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, deviceconnectionstate_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, devicebattery_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, devicevalue_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, onequal_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, ongreater_),
  PROTOBUF_FIELD_OFFSET(::Devices::Device, onlesser_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Devices::DeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Devices::DeviceList, devicevector_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Devices::IfDo)},
  { 10, 26, -1, sizeof(::Devices::Device)},
  { 36, -1, -1, sizeof(::Devices::DeviceList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Devices::_IfDo_default_instance_._instance,
  &::Devices::_Device_default_instance_._instance,
  &::Devices::_DeviceList_default_instance_._instance,
};

const char descriptor_table_protodef_devices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdevices.proto\022\007Devices\"6\n\004IfDo\022\017\n\002if\030\001"
  " \001(\tH\000\210\001\001\022\017\n\002do\030\002 \001(\tH\001\210\001\001B\005\n\003_ifB\005\n\003_do"
  "\"\253\003\n\006Device\022\027\n\ndeviceName\030\001 \001(\tH\000\210\001\001\022\033\n\016"
  "deviceCategory\030\002 \001(\tH\001\210\001\001\022\027\n\ndeviceType\030"
  "\003 \001(\005H\002\210\001\001\022\030\n\013deviceState\030\004 \001(\005H\003\210\001\001\022\"\n\025"
  "deviceConnectionState\030\005 \001(\005H\004\210\001\001\022\032\n\rdevi"
  "ceBattery\030\006 \001(\005H\005\210\001\001\022\030\n\013deviceValue\030\007 \001("
  "\002H\006\210\001\001\022\036\n\007onEqual\030\010 \003(\0132\r.Devices.IfDo\022 "
  "\n\tonGreater\030\t \003(\0132\r.Devices.IfDo\022\037\n\010onLe"
  "sser\030\n \003(\0132\r.Devices.IfDoB\r\n\013_deviceName"
  "B\021\n\017_deviceCategoryB\r\n\013_deviceTypeB\016\n\014_d"
  "eviceStateB\030\n\026_deviceConnectionStateB\020\n\016"
  "_deviceBatteryB\016\n\014_deviceValue\"3\n\nDevice"
  "List\022%\n\014deviceVector\030\001 \003(\0132\017.Devices.Dev"
  "iceb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_devices_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_devices_2eproto = {
    false, false, 571, descriptor_table_protodef_devices_2eproto,
    "devices.proto",
    &descriptor_table_devices_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_devices_2eproto::offsets,
    file_level_metadata_devices_2eproto, file_level_enum_descriptors_devices_2eproto,
    file_level_service_descriptors_devices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_devices_2eproto_getter() {
  return &descriptor_table_devices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_devices_2eproto(&descriptor_table_devices_2eproto);
namespace Devices {

// ===================================================================

class IfDo::_Internal {
 public:
  using HasBits = decltype(std::declval<IfDo>()._has_bits_);
  static void set_has_if_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_do_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IfDo::IfDo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Devices.IfDo)
}
IfDo::IfDo(const IfDo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_if_()) {
    if__.Set(from._internal_if_(), 
      GetArenaForAllocation());
  }
  do__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    do__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_do_()) {
    do__.Set(from._internal_do_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Devices.IfDo)
}

inline void IfDo::SharedCtor() {
if__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
do__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  do__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IfDo::~IfDo() {
  // @@protoc_insertion_point(destructor:Devices.IfDo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IfDo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if__.Destroy();
  do__.Destroy();
}

void IfDo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IfDo::Clear() {
// @@protoc_insertion_point(message_clear_start:Devices.IfDo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      do__.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IfDo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string if = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_if_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Devices.IfDo.if"));
        } else
          goto handle_unusual;
        continue;
      // optional string do = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_do_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Devices.IfDo.do"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IfDo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Devices.IfDo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string if = 1;
  if (_internal_has_if_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_().data(), static_cast<int>(this->_internal_if_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Devices.IfDo.if");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_if_(), target);
  }

  // optional string do = 2;
  if (_internal_has_do_()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_do_().data(), static_cast<int>(this->_internal_do_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Devices.IfDo.do");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_do_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Devices.IfDo)
  return target;
}

size_t IfDo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Devices.IfDo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string if = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_if_());
    }

    // optional string do = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IfDo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IfDo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IfDo::GetClassData() const { return &_class_data_; }

void IfDo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IfDo *>(to)->MergeFrom(
      static_cast<const IfDo &>(from));
}


void IfDo::MergeFrom(const IfDo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Devices.IfDo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_if_(from._internal_if_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_do_(from._internal_do_());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IfDo::CopyFrom(const IfDo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Devices.IfDo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfDo::IsInitialized() const {
  return true;
}

void IfDo::InternalSwap(IfDo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &if__, lhs_arena,
      &other->if__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &do__, lhs_arena,
      &other->do__, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IfDo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_devices_2eproto_getter, &descriptor_table_devices_2eproto_once,
      file_level_metadata_devices_2eproto[0]);
}

// ===================================================================

class Device::_Internal {
 public:
  using HasBits = decltype(std::declval<Device>()._has_bits_);
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicecategory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_devicestate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deviceconnectionstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_devicebattery(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_devicevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  onequal_(arena),
  ongreater_(arena),
  onlesser_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Devices.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      onequal_(from.onequal_),
      ongreater_(from.ongreater_),
      onlesser_(from.onlesser_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicename()) {
    devicename_.Set(from._internal_devicename(), 
      GetArenaForAllocation());
  }
  devicecategory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    devicecategory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devicecategory()) {
    devicecategory_.Set(from._internal_devicecategory(), 
      GetArenaForAllocation());
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicevalue_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(devicevalue_));
  // @@protoc_insertion_point(copy_constructor:Devices.Device)
}

inline void Device::SharedCtor() {
devicename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  devicename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
devicecategory_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  devicecategory_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&devicetype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&devicevalue_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(devicevalue_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:Devices.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devicename_.Destroy();
  devicecategory_.Destroy();
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:Devices.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onequal_.Clear();
  ongreater_.Clear();
  onlesser_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      devicename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      devicecategory_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&devicetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&devicevalue_) -
        reinterpret_cast<char*>(&devicetype_)) + sizeof(devicevalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Devices.Device.deviceName"));
        } else
          goto handle_unusual;
        continue;
      // optional string deviceCategory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicecategory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Devices.Device.deviceCategory"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_devicetype(&has_bits);
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_devicestate(&has_bits);
          devicestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceConnectionState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_deviceconnectionstate(&has_bits);
          deviceconnectionstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deviceBattery = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_devicebattery(&has_bits);
          devicebattery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float deviceValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_devicevalue(&has_bits);
          devicevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .Devices.IfDo onEqual = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_onequal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Devices.IfDo onGreater = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ongreater(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Devices.IfDo onLesser = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_onlesser(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Devices.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string deviceName = 1;
  if (_internal_has_devicename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Devices.Device.deviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devicename(), target);
  }

  // optional string deviceCategory = 2;
  if (_internal_has_devicecategory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicecategory().data(), static_cast<int>(this->_internal_devicecategory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Devices.Device.deviceCategory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicecategory(), target);
  }

  // optional int32 deviceType = 3;
  if (_internal_has_devicetype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_devicetype(), target);
  }

  // optional int32 deviceState = 4;
  if (_internal_has_devicestate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_devicestate(), target);
  }

  // optional int32 deviceConnectionState = 5;
  if (_internal_has_deviceconnectionstate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_deviceconnectionstate(), target);
  }

  // optional int32 deviceBattery = 6;
  if (_internal_has_devicebattery()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_devicebattery(), target);
  }

  // optional float deviceValue = 7;
  if (_internal_has_devicevalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_devicevalue(), target);
  }

  // repeated .Devices.IfDo onEqual = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_onequal_size()); i < n; i++) {
    const auto& repfield = this->_internal_onequal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Devices.IfDo onGreater = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ongreater_size()); i < n; i++) {
    const auto& repfield = this->_internal_ongreater(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Devices.IfDo onLesser = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_onlesser_size()); i < n; i++) {
    const auto& repfield = this->_internal_onlesser(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Devices.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Devices.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Devices.IfDo onEqual = 8;
  total_size += 1UL * this->_internal_onequal_size();
  for (const auto& msg : this->onequal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Devices.IfDo onGreater = 9;
  total_size += 1UL * this->_internal_ongreater_size();
  for (const auto& msg : this->ongreater_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Devices.IfDo onLesser = 10;
  total_size += 1UL * this->_internal_onlesser_size();
  for (const auto& msg : this->onlesser_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string deviceName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicename());
    }

    // optional string deviceCategory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devicecategory());
    }

    // optional int32 deviceType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devicetype());
    }

    // optional int32 deviceState = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devicestate());
    }

    // optional int32 deviceConnectionState = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deviceconnectionstate());
    }

    // optional int32 deviceBattery = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_devicebattery());
    }

    // optional float deviceValue = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }

void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Device *>(to)->MergeFrom(
      static_cast<const Device &>(from));
}


void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Devices.Device)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  onequal_.MergeFrom(from.onequal_);
  ongreater_.MergeFrom(from.ongreater_);
  onlesser_.MergeFrom(from.onlesser_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_devicecategory(from._internal_devicecategory());
    }
    if (cached_has_bits & 0x00000004u) {
      devicetype_ = from.devicetype_;
    }
    if (cached_has_bits & 0x00000008u) {
      devicestate_ = from.devicestate_;
    }
    if (cached_has_bits & 0x00000010u) {
      deviceconnectionstate_ = from.deviceconnectionstate_;
    }
    if (cached_has_bits & 0x00000020u) {
      devicebattery_ = from.devicebattery_;
    }
    if (cached_has_bits & 0x00000040u) {
      devicevalue_ = from.devicevalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Devices.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  onequal_.InternalSwap(&other->onequal_);
  ongreater_.InternalSwap(&other->ongreater_);
  onlesser_.InternalSwap(&other->onlesser_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &devicename_, lhs_arena,
      &other->devicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &devicecategory_, lhs_arena,
      &other->devicecategory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, devicevalue_)
      + sizeof(Device::devicevalue_)
      - PROTOBUF_FIELD_OFFSET(Device, devicetype_)>(
          reinterpret_cast<char*>(&devicetype_),
          reinterpret_cast<char*>(&other->devicetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_devices_2eproto_getter, &descriptor_table_devices_2eproto_once,
      file_level_metadata_devices_2eproto[1]);
}

// ===================================================================

class DeviceList::_Internal {
 public:
};

DeviceList::DeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  devicevector_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Devices.DeviceList)
}
DeviceList::DeviceList(const DeviceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devicevector_(from.devicevector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Devices.DeviceList)
}

inline void DeviceList::SharedCtor() {
}

DeviceList::~DeviceList() {
  // @@protoc_insertion_point(destructor:Devices.DeviceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:Devices.DeviceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicevector_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Devices.Device deviceVector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devicevector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Devices.DeviceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Devices.Device deviceVector = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devicevector_size()); i < n; i++) {
    const auto& repfield = this->_internal_devicevector(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Devices.DeviceList)
  return target;
}

size_t DeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Devices.DeviceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Devices.Device deviceVector = 1;
  total_size += 1UL * this->_internal_devicevector_size();
  for (const auto& msg : this->devicevector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceList::GetClassData() const { return &_class_data_; }

void DeviceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceList *>(to)->MergeFrom(
      static_cast<const DeviceList &>(from));
}


void DeviceList::MergeFrom(const DeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Devices.DeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  devicevector_.MergeFrom(from.devicevector_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceList::CopyFrom(const DeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Devices.DeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceList::IsInitialized() const {
  return true;
}

void DeviceList::InternalSwap(DeviceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  devicevector_.InternalSwap(&other->devicevector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_devices_2eproto_getter, &descriptor_table_devices_2eproto_once,
      file_level_metadata_devices_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Devices
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Devices::IfDo*
Arena::CreateMaybeMessage< ::Devices::IfDo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Devices::IfDo >(arena);
}
template<> PROTOBUF_NOINLINE ::Devices::Device*
Arena::CreateMaybeMessage< ::Devices::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Devices::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::Devices::DeviceList*
Arena::CreateMaybeMessage< ::Devices::DeviceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Devices::DeviceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
